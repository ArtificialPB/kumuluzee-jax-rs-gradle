import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'java'
}

group 'com.kumuluz.ee.samples'
version '3.2.0-SNAPSHOT'

sourceCompatibility = 8
targetCompatibility = 8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "https://dl.bintray.com/sacoo7/Maven" }
    maven { url "https://jitpack.io" }
}

configurations {
    kumuluzeeLoader { transitive = false }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    implementation 'com.kumuluz.ee:kumuluzee-bom:3.1.0'
    implementation 'com.kumuluz.ee:kumuluzee-core:3.1.0'
    implementation 'com.kumuluz.ee:kumuluzee-servlet-jetty:3.1.0'
    implementation 'com.kumuluz.ee:kumuluzee-jax-rs-jersey:3.1.0'
    implementation "javax.xml.bind:jaxb-api:2.3.0"
    implementation "javax.activation:activation:1.1.1"
    kumuluzeeLoader 'com.kumuluz.ee:kumuluzee-loader:3.1.0'
}

task repackageKumuluzee {
    /*Unpack and copy kumuluzee loader*/
    copy {
        from zipTree(configurations.kumuluzeeLoader.singleFile).matching { include "**/*.class" }
        into "$buildDir/classes/java/main"
        outputs.upToDateWhen { false }
    }
    /*Create boot loader properties*/
    file("$buildDir/classes/java/main/META-INF/kumuluzee").mkdirs()
    /*Change to correct main class*/
    file("$buildDir/classes/java/main/META-INF/kumuluzee/boot-loader.properties").text = "main-class=com.kumuluz.ee.EeApplication"
}

/**
 * Configure a different path using -PwebappDir="RELATIVE_PATH" argument when running the task.
 * */
task copyOrCreateWebapp {
    def webapp_path = Paths.get("$buildDir", "classes", "webapp")
    if (!Files.isDirectory(webapp_path)) {
        def sourceWebappPath = project.hasProperty("webappDir") ? Paths.get(projectDir.path, project.property("webappDir").toString()) : Paths.get(projectDir.path, "src", "main", "webapp")
        println("Source Webapp path: " + sourceWebappPath)
        if (Files.isDirectory(sourceWebappPath)) {
            copy {
                from sourceWebappPath
                into webapp_path
            }
        }
        if (!Files.isDirectory(webapp_path)) {
            Files.createDirectories(webapp_path)
        }
    }
}

/**
 * Builds the kumuluzee UberJAR.
 * */
task buildKumuluzee {
    jar {
        baseName = "kumuluz-server"
        archiveName = "${baseName}-${version}.${extension}"
        manifest {
            attributes "Main-Class": "com.kumuluz.ee.loader.EeBootLoader"
        }
        /*Copy project dependencies into lib folder as jars*/
        into("lib") {
            from configurations.runtimeClasspath
        }
    }
    dependsOn repackageKumuluzee
    dependsOn copyOrCreateWebapp
    finalizedBy build
}

/**
 * Run the application in an executable JAR archive runtime.
 * */
task runJar(type: JavaExec) {
    main = "-jar"
    args jar.archivePath
}